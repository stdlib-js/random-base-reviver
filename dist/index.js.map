{
  "version": 3,
  "sources": ["../lib/prngs.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n// This file is generated using `scripts/build.js`.\n\n'use strict';\n\n// MODULES //\n\nvar prng0 = require( '@stdlib/random-base-arcsine' );\nvar prng1 = require( '@stdlib/random-base-bernoulli' );\nvar prng2 = require( '@stdlib/random-base-beta' );\nvar prng3 = require( '@stdlib/random-base-betaprime' );\nvar prng4 = require( '@stdlib/random-base-binomial' );\nvar prng5 = require( '@stdlib/random-base-box-muller' );\nvar prng6 = require( '@stdlib/random-base-cauchy' );\nvar prng7 = require( '@stdlib/random-base-chi' );\nvar prng8 = require( '@stdlib/random-base-chisquare' );\nvar prng9 = require( '@stdlib/random-base-cosine' );\nvar prng10 = require( '@stdlib/random-base-discrete-uniform' );\nvar prng11 = require( '@stdlib/random-base-erlang' );\nvar prng12 = require( '@stdlib/random-base-exponential' );\nvar prng13 = require( '@stdlib/random-base-f' );\nvar prng14 = require( '@stdlib/random-base-frechet' );\nvar prng15 = require( '@stdlib/random-base-gamma' );\nvar prng16 = require( '@stdlib/random-base-geometric' );\nvar prng17 = require( '@stdlib/random-base-gumbel' );\nvar prng18 = require( '@stdlib/random-base-hypergeometric' );\nvar prng19 = require( '@stdlib/random-base-improved-ziggurat' );\nvar prng20 = require( '@stdlib/random-base-invgamma' );\nvar prng21 = require( '@stdlib/random-base-kumaraswamy' );\nvar prng22 = require( '@stdlib/random-base-laplace' );\nvar prng23 = require( '@stdlib/random-base-levy' );\nvar prng24 = require( '@stdlib/random-base-logistic' );\nvar prng25 = require( '@stdlib/random-base-lognormal' );\nvar prng26 = require( '@stdlib/random-base-minstd' );\nvar prng27 = require( '@stdlib/random-base-minstd-shuffle' );\nvar prng28 = require( '@stdlib/random-base-mt19937' );\nvar prng29 = require( '@stdlib/random-base-negative-binomial' );\nvar prng30 = require( '@stdlib/random-base-normal' );\nvar prng31 = require( '@stdlib/random-base-pareto-type1' );\nvar prng32 = require( '@stdlib/random-base-poisson' );\nvar prng33 = require( '@stdlib/random-base-randi' );\nvar prng34 = require( '@stdlib/random-base-randn' );\nvar prng35 = require( '@stdlib/random-base-randu' );\nvar prng36 = require( '@stdlib/random-base-rayleigh' );\nvar prng37 = require( '@stdlib/random-base-t' );\nvar prng38 = require( '@stdlib/random-base-triangular' );\nvar prng39 = require( '@stdlib/random-base-uniform' );\nvar prng40 = require( '@stdlib/random-base-weibull' );\n\n\n// MAIN //\n\nvar prngs = {};\nprngs[ 'arcsine' ] = prng0.factory;\nprngs[ 'bernoulli' ] = prng1.factory;\nprngs[ 'beta' ] = prng2.factory;\nprngs[ 'betaprime' ] = prng3.factory;\nprngs[ 'binomial' ] = prng4.factory;\nprngs[ 'box-muller' ] = prng5.factory;\nprngs[ 'cauchy' ] = prng6.factory;\nprngs[ 'chi' ] = prng7.factory;\nprngs[ 'chisquare' ] = prng8.factory;\nprngs[ 'cosine' ] = prng9.factory;\nprngs[ 'discrete-uniform' ] = prng10.factory;\nprngs[ 'erlang' ] = prng11.factory;\nprngs[ 'exponential' ] = prng12.factory;\nprngs[ 'f' ] = prng13.factory;\nprngs[ 'frechet' ] = prng14.factory;\nprngs[ 'gamma' ] = prng15.factory;\nprngs[ 'geometric' ] = prng16.factory;\nprngs[ 'gumbel' ] = prng17.factory;\nprngs[ 'hypergeometric' ] = prng18.factory;\nprngs[ 'improved-ziggurat' ] = prng19.factory;\nprngs[ 'invgamma' ] = prng20.factory;\nprngs[ 'kumaraswamy' ] = prng21.factory;\nprngs[ 'laplace' ] = prng22.factory;\nprngs[ 'levy' ] = prng23.factory;\nprngs[ 'logistic' ] = prng24.factory;\nprngs[ 'lognormal' ] = prng25.factory;\nprngs[ 'minstd' ] = prng26.factory;\nprngs[ 'minstd-shuffle' ] = prng27.factory;\nprngs[ 'mt19937' ] = prng28.factory;\nprngs[ 'negative-binomial' ] = prng29.factory;\nprngs[ 'normal' ] = prng30.factory;\nprngs[ 'pareto-type1' ] = prng31.factory;\nprngs[ 'poisson' ] = prng32.factory;\nprngs[ 'randi' ] = prng33.factory;\nprngs[ 'randn' ] = prng34.factory;\nprngs[ 'randu' ] = prng35.factory;\nprngs[ 'rayleigh' ] = prng36.factory;\nprngs[ 't' ] = prng37.factory;\nprngs[ 'triangular' ] = prng38.factory;\nprngs[ 'uniform' ] = prng39.factory;\nprngs[ 'weibull' ] = prng40.factory;\n\n\n// EXPORTS //\n\nmodule.exports = prngs;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isArray = require( '@stdlib/assert-is-array' );\nvar contains = require( '@stdlib/assert-contains' );\nvar Int32Array = require( '@stdlib/array-int32' );\nvar Uint32Array = require( '@stdlib/array-uint32' );\nvar table = require( './prngs.js' );\n\n\n// VARIABLES //\n\nvar TYPED_ARRAY_CTORS = {\n\t'Int32Array': Int32Array,\n\t'Uint32Array': Uint32Array\n};\nvar PRNG_WRAPPERS = [ 'randi', 'randn', 'randu' ];\n\n\n// MAIN //\n\n/**\n* Revives a JSON-serialized pseudorandom number generator.\n*\n* @param {string} key - key\n* @param {*} value - value\n* @returns {(*|Function)} value or PRNG\n*\n* @example\n* var parseJSON = require( '@stdlib/utils-parse-json' );\n* var mt19937 = require( '@stdlib/random-base-mt19937' );\n*\n* var str = JSON.stringify( mt19937 );\n* var rand = parseJSON( str, reviveBasePRNG );\n* // returns <Function>\n*/\nfunction reviveBasePRNG( key, value ) {\n\tvar factory;\n\tvar opts;\n\tvar args;\n\tvar ctor;\n\tvar tmp;\n\tif (\n\t\tvalue &&\n\t\tvalue.type === 'PRNG' &&\n\t\tisString( value.name ) &&\n\t\tisObject( value.state ) &&\n\t\tisArray( value.params ) &&\n\t\tisString( value.state.type ) &&\n\t\tisArray( value.state.data )\n\t) {\n\t\topts = {};\n\t\tfactory = table[ value.name ];\n\t\tif ( factory === void 0 ) {\n\t\t\ttmp = value.name.split( '-' );\n\t\t\tif ( contains( PRNG_WRAPPERS, tmp[ 0 ] ) ) {\n\t\t\t\tfactory = table[ tmp[ 0 ] ];\n\t\t\t\topts.name = tmp.slice( 1 ).join( '-' );\n\t\t\t}\n\t\t}\n\t\tif ( factory ) {\n\t\t\tctor = TYPED_ARRAY_CTORS[ value.state.type ];\n\t\t\tif ( ctor ) {\n\t\t\t\topts.state = new ctor( value.state.data );\n\n\t\t\t\targs = value.params.slice();\n\t\t\t\targs.push( opts );\n\n\t\t\t\ttry {\n\t\t\t\t\treturn factory.apply( null, args );\n\t\t\t\t} catch ( error ) { // eslint-disable-line no-unused-vars\n\t\t\t\t\t// Return the original JSON value...\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn value;\n}\n\n\n// EXPORTS //\n\nmodule.exports = reviveBasePRNG;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Revive a JSON-serialized pseudorandom generator.\n*\n* @module @stdlib/random-base-reviver\n*\n* @example\n* var parseJSON = require( '@stdlib/utils-parse-json' );\n* var mt19937 = require( '@stdlib/random-base-mt19937' );\n* var reviveBasePRNG = require( '@stdlib/random-base-reviver' );\n*\n* var str = JSON.stringify( mt19937 );\n* var rand = parseJSON( str, reviveBasePRNG );\n* // returns <Function>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_prngs", "__commonJSMin", "exports", "module", "prng0", "prng1", "prng2", "prng3", "prng4", "prng5", "prng6", "prng7", "prng8", "prng9", "prng10", "prng11", "prng12", "prng13", "prng14", "prng15", "prng16", "prng17", "prng18", "prng19", "prng20", "prng21", "prng22", "prng23", "prng24", "prng25", "prng26", "prng27", "prng28", "prng29", "prng30", "prng31", "prng32", "prng33", "prng34", "prng35", "prng36", "prng37", "prng38", "prng39", "prng40", "prngs", "require_main", "__commonJSMin", "exports", "module", "isString", "isObject", "isArray", "contains", "Int32Array", "Uint32Array", "table", "TYPED_ARRAY_CTORS", "PRNG_WRAPPERS", "reviveBasePRNG", "key", "value", "factory", "opts", "args", "ctor", "tmp", "error", "main"]
}
